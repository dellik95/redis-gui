// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedisGUI.Infrastructure.Persistence;

#nullable disable

namespace RedisGUI.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250114172543_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RedisGUI.Domain.Connection.RedisConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("DatabaseNumber")
                        .HasColumnType("int");

                    b.Property<string>("ServerHost")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("ServerPort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("RedisGUI.Domain.Connection.AnonymousRedisConnection", b =>
                {
                    b.HasBaseType("RedisGUI.Domain.Connection.RedisConnection");

                    b.ToTable("AnonymousRedisConnection");
                });

            modelBuilder.Entity("RedisGUI.Domain.Connection.RedisConnectionWithCredentials", b =>
                {
                    b.HasBaseType("RedisGUI.Domain.Connection.RedisConnection");

                    b.ToTable("RedisConnectionWithCredentials");
                });

            modelBuilder.Entity("RedisGUI.Domain.Connection.RedisConnectionWithCredentials", b =>
                {
                    b.OwnsOne("RedisGUI.Domain.Connection.ConnectionCredentials", "ConnectionCredentials", b1 =>
                        {
                            b1.Property<Guid>("RedisConnectionWithCredentialsId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("PasswordHash")
                                .HasColumnType("longtext");

                            b1.Property<string>("UserName")
                                .HasColumnType("longtext");

                            b1.HasKey("RedisConnectionWithCredentialsId");

                            b1.ToTable("RedisConnectionWithCredentials");

                            b1.WithOwner()
                                .HasForeignKey("RedisConnectionWithCredentialsId");
                        });

                    b.Navigation("ConnectionCredentials");
                });
#pragma warning restore 612, 618
        }
    }
}
